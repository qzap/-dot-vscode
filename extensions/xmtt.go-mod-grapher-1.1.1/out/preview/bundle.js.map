{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./out/messenger.js","webpack:///./out/preview/app.js","webpack:///./out/preview/controller.js","webpack:///./out/preview/main.js","webpack:///./out/preview/view.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;AC9Da;AACb,8CAA8C,cAAc;AAC5D,qBAAqB,mBAAO,CAAC,iDAAcaAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;;;;;;;;;;;;ACrIa;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,qsC;;;;;;;;;;;;ACnda;AACb,8CAA8C,cAAc;AAC5D,oBAAoB,mBAAO,CAAC,wCAAc;AAC1C,YAAY,mBAAO,CAAC,mCAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,+BAA+B;AACxE,iDAAiD,EAAE,GAAG,MAAM,EAAE,GAAG,QAAQ,aAAa,GAAG,SAAS,cAAc;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD,gC;;;;;;;;;;;;ACxOa;AACb,8CAA8C,cAAcgC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./out/preview/main.js\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createMessenger(port, handler) {\n    const maxIds = 2 ** 50;\n    const pendingCalls = new Map();\n    let previousId = -1;\n    async function handleRequest(wrappedMessage) {\n        const { id, message } = wrappedMessage;\n        try {\n            port.send({\n                id,\n                result: await handler(message),\n                type: \"success\"\n            });\n        }\n        catch (error) {\n            port.send({\n                id,\n                message: String(error),\n                type: \"failure\"\n            });\n        }\n    }\n    async function handleResponse(wrappedMessage) {\n        const [resolver, rejector] = pendingCalls.get(wrappedMessage.id);\n        pendingCalls.delete(wrappedMessage.id);\n        if (wrappedMessage.type === \"success\") {\n            resolver(wrappedMessage.result);\n        }\n        else {\n            rejector(wrappedMessage.message);\n        }\n    }\n    port.onReceive(async (wrappedMessage) => {\n        if (wrappedMessage.type === \"request\") {\n            await handleRequest(wrappedMessage);\n        }\n        else {\n            await handleResponse(wrappedMessage);\n        }\n    });\n    function generateId() {\n        previousId = (previousId + 1) % maxIds;\n        if (pendingCalls.has(previousId)) {\n            throw new Error(\"Well this is unexpected.\");\n        }\n        return previousId;\n    }\n    async function send(message) {\n        return new Promise((resolve, reject) => {\n            const wrappedMessage = {\n                id: generateId(),\n                message,\n                type: \"request\"\n            };\n            pendingCalls.set(wrappedMessage.id, [resolve, reject]);\n            port.send(wrappedMessage);\n        });\n    }\n    return send;\n}\nexports.createMessenger = createMessenger;\n//# sourceMappingURL=messenger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst controller_1 = require(\"./controller\");\nconst theXmlParser = new DOMParser();\nfunction rawParseSvg(image) {\n    return theXmlParser.parseFromString(image, \"image/svg+xml\");\n}\nconst theDefaultImage = rawParseSvg('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100px\" height=\"100px\"></svg>').documentElement;\nfunction parseSVG(image) {\n    const imageDocument = rawParseSvg(image);\n    const rootElement = imageDocument.documentElement;\n    if (rootElement instanceof SVGSVGElement) {\n        return rootElement;\n    }\n    else {\n        const partialSvg = imageDocument.querySelector(\"svg\");\n        const errorMessage = imageDocument.querySelector(\"parsererror>div\").textContent;\n        return [partialSvg, errorMessage];\n    }\n}\nfunction measureImageSize(svg) {\n    return [svg.width.baseVal.value, svg.height.baseVal.value];\n}\nclass App {\n    constructor(imageValue, mods, status, controller, appEventListener) {\n        this.imageValue = imageValue;\n        this.mods = mods;\n        this.status = status;\n        this.controller = controller;\n        this.appEventListener = appEventListener;\n    }\n    static create(width, height, appEventListener) {\n        const [imageWidth, imageHeight] = measureImageSize(theDefaultImage);\n        return new App(theDefaultImage.outerHTML, [], null, controller_1.Controller.create(width, height, imageWidth, imageHeight, this.contentMargin, appEventListener, this.zoomStep, this.offsetStep, this.initialZoomMode), appEventListener);\n    }\n    static fromArchive(archive, appEventListener) {\n        return new App(archive.image, archive.mods, archive.status, controller_1.Controller.fromArchive(archive.controller, appEventListener), appEventListener);\n    }\n    get image() {\n        return this.imageValue;\n    }\n    beginDrag(x, y) {\n        return this.controller.beginDrag(x, y);\n    }\n    makeCenter() {\n        this.controller.makeCenter();\n    }\n    makeIdentity() {\n        this.controller.makeIdentity();\n    }\n    moveDown() {\n        this.controller.moveDown();\n    }\n    moveLeft() {\n        this.controller.moveLeft();\n    }\n    moveRight() {\n        this.controller.moveRight();\n    }\n    moveUp() {\n        this.controller.moveUp();\n    }\n    resize(width, height) {\n        this.controller.resize(width, height);\n    }\n    setZoomMode(zoomMode) {\n        this.controller.setZoomMode(zoomMode);\n    }\n    toggleOverview(x, y) {\n        this.controller.toggleOverview(x, y);\n    }\n    toggleOverviewCenter() {\n        this.controller.toggleOverviewCenter();\n    }\n    zoomIn(x, y) {\n        this.controller.zoomIn(x, y);\n    }\n    zoomOut(x, y) {\n        this.controller.zoomOut(x, y);\n    }\n    zoomInCenter() {\n        this.controller.zoomInCenter();\n    }\n    zoomOutCenter() {\n        this.controller.zoomOutCenter();\n    }\n    setMods(mods, mod) {\n        this.mods = mods;\n        this.appEventListener.onModsChanged(mods, mod);\n        // console.log(\"setMods.....\\n\");\n    }\n    setImage(image) {\n        // console.log(\"setImage.....\\n\");\n        const result = parseSVG(image);\n        let svg;\n        if (result instanceof SVGSVGElement) {\n            svg = result;\n            this.imageValue = image;\n            this.status = null;\n        }\n        else {\n            const [maybeSvg, errorMessage] = result;\n            svg = maybeSvg === null ? theDefaultImage : maybeSvg;\n            this.imageValue = svg.outerHTML;\n            this.status = `Invalid SVG: ${errorMessage}`;\n        }\n        const [imageWidth, imageHeight] = measureImageSize(svg);\n        this.controller.resizeContent(imageWidth, imageHeight);\n        // A hack to remove extra space of the graph within the img element.\n        svg.setAttribute(\"preserveAspectRatio\", \"none\");\n        svg.setAttribute(\"width\", \"100%\");\n        svg.setAttribute(\"height\", \"100%\");\n        this.appEventListener.onImageChanged(svg);\n        this.appEventListener.onStatusChanged(this.status);\n    }\n    setStatus(status) {\n        this.status = status;\n        this.appEventListener.onStatusChanged(status);\n    }\n    serialize() {\n        return {\n            controller: this.controller.serialize(),\n            image: this.image,\n            mods: this.mods,\n            status: this.status\n        };\n    }\n}\nApp.contentMargin = 10;\nApp.zoomStep = 1.2;\nApp.offsetStep = 10;\nApp.initialZoomMode = 2 /* AutoFit */;\nexports.App = App;\n//# sourceMappingURL=app.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst view_1 = require(\"./view\");\nconst defaultNormalZoom = 2;\nfunction hasEnoughSpace(contentWidth, contentHeight, availableWidth, availableHeight) {\n    return contentWidth < availableWidth && contentHeight < availableHeight;\n}\nfunction viewHasEnoughSpace(view) {\n    const contentMargin = view.contentMargin * 2;\n    return hasEnoughSpace(view.contentWidth, view.contentHeight, view.width - contentMargin, view.height - contentMargin);\n}\nfunction viewHasEnoughSpaceWithContentSize(view, contentWidth, contentHeight) {\n    const contentMargin = view.contentMargin * 2;\n    return hasEnoughSpace(contentWidth, contentHeight, view.width - contentMargin, view.height - contentMargin);\n}\nfunction viewHasEnoughSpaceWithSize(view, width, height) {\n    const contentMargin = view.contentMargin * 2;\n    return hasEnoughSpace(view.contentWidth, view.contentHeight, width - contentMargin, height - contentMargin);\n}\nclass FixedState {\n    constructor() {\n        this.zoomMode = 0 /* Fixed */;\n    }\n    static fromArchive(archive) {\n        switch (archive.type) {\n            case \"FixedNormalState\":\n                return FixedNormalState.fromArchive(archive);\n            case \"Fixed100PercentState\":\n                return Fixed100PercentState.fromArchive(archive);\n        }\n    }\n    static create(width, height, contentWidth, contentHeight, contentMargin, savedZoom) {\n        const contentMargin2 = contentMargin * 2;\n        if (hasEnoughSpace(contentWidth, contentHeight, width - contentMargin2, height - contentMargin2)) {\n            return new Fixed100PercentState(view_1.IdentityView.createCenter(width, height, contentWidth, contentHeight, contentMargin), savedZoom);\n        }\n        else {\n            return new FixedNormalState(view_1.View.createFit(width, height, contentWidth, contentHeight, contentMargin));\n        }\n    }\n    moveTo(x, y) {\n        this.view.contentX = x;\n        this.view.contentY = y;\n        return this;\n    }\n    resize(width, height) {\n        this.view.resize(width, height);\n        return this;\n    }\n    resizeContent(width, height) {\n        this.view.resizeContent(width, height);\n        return this;\n    }\n    resizeAll(width, height, contentWidth, contentHeight, contentMargin) {\n        this.view.resizeAll(width, height, contentWidth, contentHeight);\n        this.view.contentMargin = contentMargin;\n    }\n}\nclass FixedNormalState extends FixedState {\n    constructor(view) {\n        super();\n        this.view = view;\n    }\n    static fromArchive(archive) {\n        return new FixedNormalState(view_1.View.fromArchive(archive.view));\n    }\n    setZoomMode(zoomMode) {\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                return this;\n            case 1 /* Fit */:\n                return new FitState(this.view.toFit(), this, this.view.zoom);\n            case 2 /* AutoFit */:\n                return AutoFitState.fromFixedView(this.view, this, this.view.zoom);\n        }\n    }\n    toggleOverview(x, y) {\n        return new Fixed100PercentState(this.view.toIdentity(x, y), this.view.zoom);\n    }\n    zoomTo(x, y, zoom) {\n        this.view.zoomTo(x, y, zoom);\n        return this;\n    }\n    serialize() {\n        return {\n            type: \"FixedNormalState\",\n            view: this.view.serialize()\n        };\n    }\n}\nclass Fixed100PercentState extends FixedState {\n    constructor(view, savedZoom) {\n        super();\n        this.view = view;\n        this.savedZoom = savedZoom;\n    }\n    static fromArchive(archive) {\n        return new Fixed100PercentState(view_1.IdentityView.fromArchive(archive.view), archive.savedZoom);\n    }\n    setZoomMode(zoomMode) {\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                return this;\n            case 1 /* Fit */:\n                return new FitState(this.view.toFit(), this, this.savedZoom);\n            case 2 /* AutoFit */:\n                return AutoFitState.fromFixedView(this.view, this, this.savedZoom);\n        }\n    }\n    toggleOverview(x, y) {\n        return new FixedNormalState(this.view.zoomTo(x, y, this.savedZoom));\n    }\n    zoomTo(x, y, zoom) {\n        return new FixedNormalState(this.view.zoomTo(x, y, zoom));\n    }\n    serialize() {\n        return {\n            savedZoom: this.savedZoom,\n            type: \"Fixed100PercentState\",\n            view: this.view.serialize()\n        };\n    }\n}\nclass FitState {\n    constructor(view, savedState, savedZoom) {\n        this.view = view;\n        this.savedState = savedState;\n        this.savedZoom = savedZoom;\n        this.zoomMode = 1 /* Fit */;\n    }\n    static fromArchive(archive) {\n        return new FitState(view_1.FitView.fromArchive(archive.view), archive.savedState === undefined ? undefined : FixedState.fromArchive(archive.savedState), archive.savedZoom);\n    }\n    moveTo(x, y) {\n        return new FixedNormalState(this.view.moveTo(x, y));\n    }\n    resize(width, height) {\n        this.view.resize(width, height);\n        return this;\n    }\n    resizeContent(width, height) {\n        this.view.resizeContent(width, height);\n        return this;\n    }\n    setZoomMode(zoomMode) {\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                if (this.savedState === undefined) {\n                    return FixedState.create(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin, this.view.zoom);\n                }\n                else {\n                    this.savedState.resizeAll(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin);\n                    return this.savedState;\n                }\n            case 1 /* Fit */:\n                return this;\n            case 2 /* AutoFit */:\n                return AutoFitState.fromFitView(this.view, this.savedState, this.savedZoom);\n        }\n    }\n    toggleOverview(x, y) {\n        return new Fixed100PercentState(this.view.toIdentity(x, y), this.view.zoom);\n    }\n    zoomTo(x, y, zoom) {\n        return new FixedNormalState(this.view.zoomTo(x, y, zoom));\n    }\n    serialize() {\n        return {\n            savedState: this.savedState === undefined ? undefined : this.savedState.serialize(),\n            savedZoom: this.savedZoom,\n            type: \"FitState\",\n            view: this.view.serialize()\n        };\n    }\n}\nclass AutoFitState {\n    constructor() {\n        this.zoomMode = 2 /* AutoFit */;\n    }\n    static create(width, height, contentWidth, contentHeight, contentMargin) {\n        const contentMargin2 = contentMargin * 2;\n        if (hasEnoughSpace(contentWidth, contentHeight, width - contentMargin2, height - contentMargin2)) {\n            const view = new view_1.IdentityCenterView(width, height, contentWidth, contentHeight, contentMargin);\n            return new AutoFit100PercentState(view, undefined, defaultNormalZoom);\n        }\n        else {\n            const view = new view_1.FitView(width, height, contentWidth, contentHeight, contentMargin);\n            return new AutoFitFitState(view, undefined, view.zoom);\n        }\n    }\n    static fromFixedView(view, savedState, savedZoom) {\n        if (viewHasEnoughSpace(view)) {\n            return new AutoFit100PercentState(view.toIdentityCenter(), savedState, savedZoom);\n        }\n        else {\n            return new AutoFitFitState(view.toFit(), savedState, savedZoom);\n        }\n    }\n    static fromFitView(view, savedState, savedZoom) {\n        if (viewHasEnoughSpace(view)) {\n            return new AutoFit100PercentState(view.toIdentityCenter(), savedState, savedZoom);\n        }\n        else {\n            return new AutoFitFitState(view, savedState, savedZoom);\n        }\n    }\n    zoomTo(x, y, zoom) {\n        return new FixedNormalState(this.view.zoomTo(x, y, zoom));\n    }\n}\nclass AutoFit100PercentState extends AutoFitState {\n    constructor(view, savedState, savedZoom) {\n        super();\n        this.view = view;\n        this.savedState = savedState;\n        this.savedZoom = savedZoom;\n    }\n    static fromArchive(archive) {\n        return new AutoFit100PercentState(view_1.IdentityCenterView.fromArchive(archive.view), archive.savedState === undefined ? undefined : FixedState.fromArchive(archive.savedState), archive.savedZoom);\n    }\n    moveTo(x, y) {\n        return new Fixed100PercentState(this.view.moveTo(x, y), this.savedZoom);\n    }\n    resize(width, height) {\n        if (viewHasEnoughSpaceWithSize(this.view, width, height)) {\n            this.view.resize(width, height);\n            return this;\n        }\n        else {\n            return new AutoFitFitState(this.view.toFitWithSize(width, height), this.savedState, this.savedZoom);\n        }\n    }\n    resizeContent(width, height) {\n        if (viewHasEnoughSpaceWithContentSize(this.view, width, height)) {\n            this.view.resizeContent(width, height);\n            return this;\n        }\n        else {\n            return new AutoFitFitState(this.view.toFitWithContentSize(width, height), this.savedState, this.savedZoom);\n        }\n    }\n    setZoomMode(zoomMode) {\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                if (this.savedState === undefined) {\n                    return FixedState.create(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin, this.savedZoom);\n                }\n                else {\n                    this.savedState.resizeAll(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin);\n                    return this.savedState;\n                }\n            case 1 /* Fit */:\n                return new FitState(this.view.toFit(), this.savedState, this.savedZoom);\n            case 2 /* AutoFit */:\n                return this;\n        }\n    }\n    toggleOverview(x, y) {\n        return new FixedNormalState(this.view.zoomTo(x, y, this.savedZoom));\n    }\n    serialize() {\n        return {\n            savedState: this.savedState === undefined ? undefined : this.savedState.serialize(),\n            savedZoom: this.savedZoom,\n            type: \"AutoFit100PercentState\",\n            view: this.view.serialize()\n        };\n    }\n}\nclass AutoFitFitState extends AutoFitState {\n    constructor(view, savedState, savedZoom) {\n        super();\n        this.view = view;\n        this.savedState = savedState;\n        this.savedZoom = savedZoom;\n    }\n    static fromArchive(archive) {\n        return new AutoFitFitState(view_1.FitView.fromArchive(archive.view), archive.savedState === undefined ? undefined : FixedState.fromArchive(archive.savedState), archive.savedZoom);\n    }\n    moveTo(x, y) {\n        return new FixedNormalState(this.view.moveTo(x, y));\n    }\n    resize(width, height) {\n        if (viewHasEnoughSpaceWithSize(this.view, width, height)) {\n            return new AutoFit100PercentState(this.view.toIdentityCenterWithSize(width, height), this.savedState, this.savedZoom);\n        }\n        else {\n            this.view.resize(width, height);\n            return this;\n        }\n    }\n    resizeContent(width, height) {\n        if (viewHasEnoughSpaceWithContentSize(this.view, width, height)) {\n            return new AutoFit100PercentState(this.view.toIdentityCenterWithContentSize(width, height), this.savedState, this.savedZoom);\n        }\n        else {\n            this.view.resizeContent(width, height);\n            return this;\n        }\n    }\n    setZoomMode(zoomMode) {\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                if (this.savedState === undefined) {\n                    return FixedState.create(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin, this.view.zoom);\n                }\n                else {\n                    this.savedState.resizeAll(this.view.width, this.view.height, this.view.contentWidth, this.view.contentHeight, this.view.contentMargin);\n                    return this.savedState;\n                }\n            case 1 /* Fit */:\n                return new FitState(this.view, this.savedState, this.savedZoom);\n            case 2 /* AutoFit */:\n                return this;\n        }\n    }\n    toggleOverview(x, y) {\n        return new Fixed100PercentState(this.view.toIdentity(x, y), this.view.zoom);\n    }\n    serialize() {\n        return {\n            savedState: this.savedState === undefined ? undefined : this.savedState.serialize(),\n            savedZoom: this.savedZoom,\n            type: \"AutoFitFitState\",\n            view: this.view.serialize()\n        };\n    }\n}\nfunction stateFromArchive(archive) {\n    switch (archive.type) {\n        case \"FixedNormalState\":\n            return FixedNormalState.fromArchive(archive);\n        case \"Fixed100PercentState\":\n            return Fixed100PercentState.fromArchive(archive);\n        case \"FitState\":\n            return FitState.fromArchive(archive);\n        case \"AutoFit100PercentState\":\n            return AutoFit100PercentState.fromArchive(archive);\n        case \"AutoFitFitState\":\n            return AutoFitFitState.fromArchive(archive);\n    }\n}\nclass Controller {\n    constructor(state, zoomStep, offsetStep, viewEventListener) {\n        this.state = state;\n        this.zoomStep = zoomStep;\n        this.offsetStep = offsetStep;\n        this.viewEventListener = viewEventListener;\n        this.notifyLayoutChanged();\n        this.notifyZoomingModeChanged();\n    }\n    static create(width, height, contentWidth, contentHeight, contentMargin, viewEventListener, zoomStep, offsetStep, zoomMode) {\n        let state;\n        switch (zoomMode) {\n            case 0 /* Fixed */:\n                state = FixedState.create(width, height, contentWidth, contentHeight, contentMargin, defaultNormalZoom);\n                break;\n            case 1 /* Fit */:\n                const view = new view_1.FitView(width, height, contentWidth, contentHeight, contentMargin);\n                state = new FitState(view, undefined, view.zoom);\n                break;\n            case 2 /* AutoFit */:\n                state = AutoFitState.create(width, height, contentWidth, contentHeight, contentMargin);\n                break;\n            default:\n                throw new Error();\n        }\n        return new Controller(state, zoomStep, offsetStep, viewEventListener);\n    }\n    static fromArchive(archive, viewEventListener) {\n        return new Controller(stateFromArchive(archive.state), archive.zoomStep, archive.offsetStep, viewEventListener);\n    }\n    beginDrag(x, y) {\n        const offsetX = this.state.view.contentX - x;\n        const offsetY = this.state.view.contentY - y;\n        return (x1, y1) => this.moveTo(offsetX + x1, offsetY + y1);\n    }\n    makeCenter() {\n        const view = this.state.view;\n        if (!view.isCenter) {\n            this.moveTo((view.width - view.contentWidth * view.zoom) / 2, (view.height - view.contentHeight * view.zoom) / 2);\n        }\n    }\n    makeIdentity() {\n        const view = this.state.view;\n        if (!view.isIdentity) {\n            this.toggleOverviewCenter();\n        }\n    }\n    moveDown() {\n        const view = this.state.view;\n        this.moveTo(view.contentX, view.contentY + this.offsetStep);\n    }\n    moveLeft() {\n        const view = this.state.view;\n        this.moveTo(view.contentX - this.offsetStep, view.contentY);\n    }\n    moveRight() {\n        const view = this.state.view;\n        this.moveTo(view.contentX + this.offsetStep, view.contentY);\n    }\n    moveUp() {\n        const view = this.state.view;\n        this.moveTo(view.contentX, view.contentY - this.offsetStep);\n    }\n    resize(width, height) {\n        this.state = this.state.resize(width, height);\n        this.notifyLayoutChanged();\n    }\n    resizeContent(width, height) {\n        this.state = this.state.resizeContent(width, height);\n        this.notifyLayoutChanged();\n    }\n    setZoomMode(zoomMode) {\n        this.state = this.state.setZoomMode(zoomMode);\n        this.notifyLayoutChanged();\n        this.notifyZoomingModeChanged();\n    }\n    toggleOverview(x, y) {\n        this.state = this.state.toggleOverview(x, y);\n        this.notifyLayoutChanged();\n        this.notifyZoomingModeChanged();\n    }\n    toggleOverviewCenter() {\n        const view = this.state.view;\n        this.toggleOverview(view.width / 2, view.height / 2);\n    }\n    zoomIn(x, y) {\n        this.zoomTo(x, y, this.state.view.zoom * this.zoomStep);\n    }\n    zoomInCenter() {\n        const view = this.state.view;\n        this.zoomTo(view.width / 2, view.height / 2, this.state.view.zoom * this.zoomStep);\n    }\n    zoomOut(x, y) {\n        this.zoomTo(x, y, this.state.view.zoom / this.zoomStep);\n    }\n    zoomOutCenter() {\n        const view = this.state.view;\n        this.zoomTo(view.width / 2, view.height / 2, this.state.view.zoom / this.zoomStep);\n    }\n    serialize() {\n        return {\n            offsetStep: this.offsetStep,\n            state: this.state.serialize(),\n            zoomStep: this.zoomStep\n        };\n    }\n    moveTo(x, y) {\n        this.state = this.state.moveTo(x, y);\n        this.notifyLayoutChanged();\n        this.notifyZoomingModeChanged();\n    }\n    zoomTo(x, y, value) {\n        this.state = this.state.zoomTo(x, y, value);\n        this.notifyLayoutChanged();\n        this.notifyZoomingModeChanged();\n    }\n    notifyLayoutChanged() {\n        const view = this.state.view;\n        this.viewEventListener.onLayoutChanged(view.contentX, view.contentY, view.contentWidth, view.contentHeight, view.zoom);\n    }\n    notifyZoomingModeChanged() {\n        this.viewEventListener.onZoomModeChanged(this.state.zoomMode);\n    }\n}\nexports.Controller = Controller;\n//# sourceMappingURL=controller.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messenger_1 = require(\"../messenger\");\nconst app = require(\"./app\");\nfunction onReady(callback) {\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    }\n    else {\n        callback();\n    }\n}\nonReady(() => {\n    const vscode = acquireVsCodeApi();\n    const zoomElement = document.getElementById(\"zoom\");\n    const identityElement = document.getElementById(\"identity\");\n    const centerElement = document.getElementById(\"center\");\n    const selectElement = document.getElementById(\"select\");\n    const zoomModeFixedElement = document.querySelector('input[name=\"zoom-mode\"][value=\"fixed\"]');\n    const zoomModeFitElement = document.querySelector('input[name=\"zoom-mode\"][value=\"fit\"]');\n    const zoomModeAutoFitElement = document.querySelector('input[name=\"zoom-mode\"][value=\"auto-fit\"]');\n    const exportElement = document.getElementById(\"export\");\n    const workspaceElement = document.getElementById(\"workspace\");\n    const imageElement = document.getElementById(\"image\");\n    const statusElement = document.getElementById(\"status\");\n    class AppEventListener {\n        onImageChanged(image) {\n            imageElement.innerHTML = \"\";\n            imageElement.appendChild(image);\n        }\n        onModsChanged(mods, mod) {\n            selectElement.options.length = 0;\n            for (let i = 0; i < mods.length; i++) {\n                const option = document.createElement(\"option\");\n                option.innerHTML = mods[i];\n                option.value = mods[i];\n                selectElement.append(option);\n                if (mods[i] === mod) {\n                    selectElement.value = mod;\n                }\n            }\n        }\n        onStatusChanged(status) {\n            statusElement.textContent = status;\n        }\n        onZoomModeChanged(zoomMode) {\n            switch (zoomMode) {\n                case 0 /* Fixed */:\n                    zoomModeFixedElement.checked = true;\n                    break;\n                case 1 /* Fit */:\n                    zoomModeFitElement.checked = true;\n                    break;\n                case 2 /* AutoFit */:\n                    zoomModeAutoFitElement.checked = true;\n                    break;\n            }\n        }\n        onLayoutChanged(x, y, width, height, zoom) {\n            zoomElement.textContent = `${Math.round(zoom * 10000) / 100}%`;\n            imageElement.style.cssText = `left:${x}px;top:${y}px;width:${width * zoom}px;height:${height * zoom}px`;\n        }\n    }\n    let theApp;\n    // Message handler.\n    class ExtensionPort {\n        send(message) {\n            vscode.postMessage(message);\n        }\n        onReceive(handler) {\n            window.addEventListener(\"message\", (ev) => {\n                handler(ev.data);\n            });\n        }\n    }\n    async function handleRequest(message) {\n        switch (message.type) {\n            case \"initialize\":\n                theApp = app.App.create(workspaceElement.offsetWidth, workspaceElement.offsetHeight, new AppEventListener());\n                registerEventListeners();\n                break;\n            case \"restore\":\n                theApp = app.App.fromArchive(message.archive, new AppEventListener());\n                registerEventListeners();\n                // TODO: Is this really necessary?\n                theApp.resize(workspaceElement.offsetWidth, workspaceElement.offsetHeight);\n                break;\n            case \"success\":\n                if (message.image === \"\") {\n                    theApp.setStatus(\"No graph is generated\");\n                }\n                else {\n                    try {\n                        theApp.setImage(message.image);\n                    }\n                    catch (error) {\n                        theApp.setStatus(error.toString());\n                    }\n                }\n                if (message.mods) {\n                    theApp.setMods(message.mods, message.mod);\n                }\n                break;\n            case \"failure\":\n                theApp.setStatus(message.message);\n                break;\n            case \"serialize\":\n                return {\n                    result: theApp.serialize(),\n                    type: \"serializeResponse\"\n                };\n        }\n        return undefined;\n    }\n    const messenger = messenger_1.createMessenger(new ExtensionPort(), handleRequest);\n    function registerEventListeners() {\n        // Window.\n        window.addEventListener(\"keydown\", (ev) => {\n            switch (ev.key) {\n                case \" \":\n                    theApp.toggleOverviewCenter();\n                    break;\n                case \"_\":\n                case \"-\":\n                    theApp.zoomOutCenter();\n                    break;\n                case \"+\":\n                case \"=\":\n                    theApp.zoomInCenter();\n                    break;\n                case \"0\":\n                    theApp.makeIdentity();\n                    break;\n                case \"A\":\n                case \"ArrowLeft\":\n                case \"a\":\n                    theApp.moveRight();\n                    break;\n                case \"ArrowDown\":\n                case \"S\":\n                case \"s\":\n                    theApp.moveUp();\n                    break;\n                case \"ArrowRight\":\n                case \"D\":\n                case \"d\":\n                    theApp.moveLeft();\n                    break;\n                case \"ArrowUp\":\n                case \"W\":\n                case \"w\":\n                    theApp.moveDown();\n                    break;\n                case \"X\":\n                case \"x\":\n                    theApp.makeCenter();\n                    break;\n            }\n        });\n        window.addEventListener(\"resize\", () => theApp.resize(workspaceElement.offsetWidth, workspaceElement.offsetHeight));\n        // Identity element.\n        identityElement.addEventListener(\"click\", () => theApp.makeIdentity());\n        // Center element.\n        centerElement.addEventListener(\"click\", () => theApp.makeCenter());\n        // Zoom mode elements.\n        function updateZoomMode() {\n            if (this.checked) {\n                switch (this.value) {\n                    case \"fixed\":\n                        theApp.setZoomMode(0 /* Fixed */);\n                        break;\n                    case \"fit\":\n                        theApp.setZoomMode(1 /* Fit */);\n                        break;\n                    case \"auto-fit\":\n                        theApp.setZoomMode(2 /* AutoFit */);\n                        break;\n                }\n            }\n        }\n        zoomModeFixedElement.addEventListener(\"change\", updateZoomMode);\n        zoomModeFitElement.addEventListener(\"change\", updateZoomMode);\n        zoomModeAutoFitElement.addEventListener(\"change\", updateZoomMode);\n        // Export element.\n        exportElement.addEventListener(\"click\", async () => messenger({\n            image: theApp.image,\n            type: \"export\"\n        }));\n        selectElement.addEventListener(\"change\", async () => messenger({\n            mod: selectElement.value,\n            type: \"mod\"\n        }));\n        // Workspace element.\n        function getPointerPosition(event) {\n            const boundingRect = workspaceElement.getBoundingClientRect();\n            return [event.clientX - boundingRect.left, event.clientY - boundingRect.top];\n        }\n        workspaceElement.addEventListener(\"click\", (ev) => {\n            if (ev.detail % 2 === 0) {\n                const [x, y] = getPointerPosition(ev);\n                theApp.toggleOverview(x, y);\n            }\n        });\n        workspaceElement.addEventListener(\"wheel\", (ev) => {\n            const [x, y] = getPointerPosition(ev);\n            if (ev.deltaY < 0) {\n                theApp.zoomIn(x, y);\n            }\n            else {\n                theApp.zoomOut(x, y);\n            }\n        });\n        workspaceElement.addEventListener(\"pointerdown\", (ev) => {\n            const [x, y] = getPointerPosition(ev);\n            const handler = theApp.beginDrag(x, y);\n            const pointerMoveListener = (ev1) => {\n                const [x1, y1] = getPointerPosition(ev1);\n                handler(x1, y1);\n            };\n            const pointerUpListener = () => {\n                workspaceElement.removeEventListener(\"pointermove\", pointerMoveListener);\n                workspaceElement.removeEventListener(\"pointerup\", pointerUpListener);\n                workspaceElement.releasePointerCapture(ev.pointerId);\n                workspaceElement.style.cursor = \"\";\n            };\n            workspaceElement.addEventListener(\"pointermove\", pointerMoveListener);\n            workspaceElement.addEventListener(\"pointerup\", pointerUpListener);\n            workspaceElement.setPointerCapture(ev.pointerId);\n            workspaceElement.style.cursor = \"-webkit-grabbing\";\n        });\n    }\n});\n//# sourceMappingURL=main.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction fit(width, height, contentWidth, contentHeight, contentMargin) {\n    const contentMargin2 = contentMargin * 2;\n    const zoomX = (width - contentMargin2) / contentWidth;\n    const zoomY = (height - contentMargin2) / contentHeight;\n    if (zoomX < zoomY) {\n        return [contentMargin, (height - contentHeight * zoomX) / 2, zoomX];\n    }\n    else {\n        return [(width - contentWidth * zoomY) / 2, contentMargin, zoomY];\n    }\n}\nclass FixedView {\n    constructor(width, height, contentWidth, contentHeight, contentMargin, contentX, contentY, isCenter, isIdentity) {\n        this.width = width;\n        this.height = height;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n        this.contentMargin = contentMargin;\n        this.contentX = contentX;\n        this.contentY = contentY;\n        this.isCenter = isCenter;\n        this.isIdentity = isIdentity;\n    }\n    resize(width, height) {\n        this.contentX += (width - this.width) / 2;\n        this.contentY += (height - this.height) / 2;\n        this.width = width;\n        this.height = height;\n    }\n    resizeContent(width, height) {\n        const halfWidth = this.width / 2;\n        const halfHeight = this.height / 2;\n        this.contentX = halfWidth + (this.contentX - halfWidth) * width / this.contentWidth;\n        this.contentY = halfHeight + (this.contentY - halfHeight) * height / this.contentHeight;\n        this.contentWidth = width;\n        this.contentHeight = height;\n    }\n    resizeAll(width, height, contentWidth, contentHeight) {\n        this.contentX = (this.contentX - this.width / 2) * contentWidth / this.contentWidth + width / 2;\n        this.contentY = (this.contentY - this.height / 2) * contentHeight / this.contentHeight + height / 2;\n        this.width = width;\n        this.height = height;\n        this.contentWidth = contentWidth;\n        this.contentHeight = contentHeight;\n    }\n    toFit() {\n        return new FitView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n    toIdentityCenter() {\n        return new IdentityCenterView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n}\nexports.FixedView = FixedView;\nclass View extends FixedView {\n    constructor(width, height, contentWidth, contentHeight, contentMargin, contentX, contentY, zoom) {\n        super(width, height, contentWidth, contentHeight, contentMargin, contentX, contentY, false, false);\n        this.zoom = zoom;\n    }\n    static createFit(width, height, contentWidth, contentHeight, contentMargin) {\n        const [x, y, zoom] = fit(width, height, contentWidth, contentHeight, contentMargin);\n        return new View(width, height, contentWidth, contentHeight, contentMargin, x, y, zoom);\n    }\n    static fromArchive(archive) {\n        return new View(archive.width, archive.height, archive.contentWidth, archive.contentHeight, archive.contentMargin, archive.contentX, archive.contentY, archive.zoom);\n    }\n    toIdentity(x, y) {\n        return new IdentityView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x + (this.contentX - x) / this.zoom, y + (this.contentY - y) / this.zoom);\n    }\n    zoomTo(x, y, zoom) {\n        this.contentX = x + (this.contentX - x) * zoom / this.zoom;\n        this.contentY = y + (this.contentY - y) * zoom / this.zoom;\n        this.zoom = zoom;\n    }\n    serialize() {\n        return {\n            contentHeight: this.contentHeight,\n            contentMargin: this.contentMargin,\n            contentWidth: this.contentWidth,\n            contentX: this.contentX,\n            contentY: this.contentY,\n            height: this.height,\n            type: \"View\",\n            width: this.width,\n            zoom: this.zoom\n        };\n    }\n}\nexports.View = View;\nclass IdentityView extends FixedView {\n    constructor(width, height, contentWidth, contentHeight, contentMargin, contentX, contentY) {\n        super(width, height, contentWidth, contentHeight, contentMargin, contentX, contentY, false, true);\n        this.zoom = 1;\n    }\n    static createCenter(width, height, contentWidth, contentHeight, contentMargin) {\n        return new IdentityView(width, height, contentWidth, contentHeight, contentMargin, (width - contentWidth) / 2, (height - contentHeight) / 2);\n    }\n    static fromArchive(archive) {\n        return new IdentityView(archive.width, archive.height, archive.contentWidth, archive.contentHeight, archive.contentMargin, archive.contentX, archive.contentY);\n    }\n    zoomTo(x, y, zoom) {\n        return new View(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x + (this.contentX - x) * zoom, y + (this.contentY - y) * zoom, zoom);\n    }\n    serialize() {\n        return {\n            contentHeight: this.contentHeight,\n            contentMargin: this.contentMargin,\n            contentWidth: this.contentWidth,\n            contentX: this.contentX,\n            contentY: this.contentY,\n            height: this.height,\n            type: \"IdentityView\",\n            width: this.width\n        };\n    }\n}\nexports.IdentityView = IdentityView;\nclass FitView {\n    constructor(width, height, contentWidth, contentHeight, contentMargin) {\n        this.isIdentity = false;\n        this.isCenter = true;\n        this.widthValue = width;\n        this.heightValue = height;\n        this.contentWidthValue = contentWidth;\n        this.contentHeightValue = contentHeight;\n        this.contentMarginValue = contentMargin;\n        [this.contentXValue, this.contentYValue, this.zoomValue] = fit(width, height, contentWidth, contentHeight, contentMargin);\n    }\n    static fromArchive(archive) {\n        return new FitView(archive.width, archive.height, archive.contentWidth, archive.contentHeight, archive.contentMargin);\n    }\n    get width() {\n        return this.widthValue;\n    }\n    get height() {\n        return this.heightValue;\n    }\n    get contentWidth() {\n        return this.contentWidthValue;\n    }\n    get contentHeight() {\n        return this.contentHeightValue;\n    }\n    get contentMargin() {\n        return this.contentMarginValue;\n    }\n    get contentX() {\n        return this.contentXValue;\n    }\n    get contentY() {\n        return this.contentYValue;\n    }\n    get zoom() {\n        return this.zoomValue;\n    }\n    resize(width, height) {\n        this.widthValue = width;\n        this.heightValue = height;\n        this.fit();\n    }\n    resizeContent(width, height) {\n        this.contentWidthValue = width;\n        this.contentHeightValue = height;\n        this.fit();\n    }\n    zoomTo(x, y, zoom) {\n        return new View(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x + (this.contentX - x) * zoom / this.zoom, y + (this.contentY - y) * zoom / this.zoom, zoom);\n    }\n    moveTo(x, y) {\n        return new View(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x, y, this.zoom);\n    }\n    toIdentity(x, y) {\n        return new IdentityView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x + (this.contentX - x) / this.zoom, y + (this.contentY - y) / this.zoom);\n    }\n    toIdentityCenter() {\n        return new IdentityCenterView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n    toIdentityCenterWithSize(width, height) {\n        return new IdentityCenterView(width, height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n    toIdentityCenterWithContentSize(width, height) {\n        return new IdentityCenterView(this.width, this.height, width, height, this.contentMargin);\n    }\n    serialize() {\n        return {\n            contentHeight: this.contentHeight,\n            contentMargin: this.contentMargin,\n            contentWidth: this.contentWidth,\n            height: this.height,\n            type: \"FitView\",\n            width: this.width\n        };\n    }\n    fit() {\n        [this.contentXValue, this.contentYValue, this.zoomValue] = fit(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n}\nexports.FitView = FitView;\nclass IdentityCenterView {\n    constructor(width, height, contentWidth, contentHeight, contentMargin) {\n        this.contentMargin = contentMargin;\n        this.isIdentity = true;\n        this.isCenter = true;\n        this.zoom = 1;\n        this.widthValue = width;\n        this.heightValue = height;\n        this.contentWidthValue = contentWidth;\n        this.contentHeightValue = contentHeight;\n        this.contentXValue = (width - contentWidth) / 2;\n        this.contentYValue = (height - contentHeight) / 2;\n    }\n    static fromArchive(archive) {\n        return new IdentityCenterView(archive.width, archive.height, archive.contentWidth, archive.contentHeight, archive.contentMargin);\n    }\n    get width() {\n        return this.widthValue;\n    }\n    get height() {\n        return this.heightValue;\n    }\n    get contentWidth() {\n        return this.contentWidthValue;\n    }\n    get contentHeight() {\n        return this.contentHeightValue;\n    }\n    get contentX() {\n        return this.contentXValue;\n    }\n    get contentY() {\n        return this.contentYValue;\n    }\n    resize(width, height) {\n        this.widthValue = width;\n        this.heightValue = height;\n        this.center();\n    }\n    resizeContent(width, height) {\n        this.contentWidthValue = width;\n        this.contentHeightValue = height;\n        this.center();\n    }\n    moveTo(x, y) {\n        return new IdentityView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x, y);\n    }\n    zoomTo(x, y, zoom) {\n        return new View(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin, x + (this.contentX - x) * zoom, y + (this.contentY - y) * zoom, zoom);\n    }\n    toFit() {\n        return new FitView(this.width, this.height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n    toFitWithSize(width, height) {\n        return new FitView(width, height, this.contentWidth, this.contentHeight, this.contentMargin);\n    }\n    toFitWithContentSize(width, height) {\n        return new FitView(this.width, this.height, width, height, this.contentMargin);\n    }\n    serialize() {\n        return {\n            contentHeight: this.contentHeight,\n            contentMargin: this.contentMargin,\n            contentWidth: this.contentWidth,\n            height: this.height,\n            type: \"IdentityCenterView\",\n            width: this.width\n        };\n    }\n    center() {\n        this.contentXValue = (this.width - this.contentWidth) / 2;\n        this.contentYValue = (this.height - this.contentHeight) / 2;\n    }\n}\nexports.IdentityCenterView = IdentityCenterView;\n//# sourceMappingURL=view.js.map"],"sourceRoot":""}